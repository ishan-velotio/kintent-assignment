swagger: '2.0'
info:
  description: Starter API server
  version: '0.1.0'
  contact:
    email: ishan.khanduja@velotio.com
  title: Node Starter Application
# during dev, should point to your local machine
host: localhost:3000
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
  - multipart/form-data
# format of the responses to the client (Accepts)
produces:
  - application/json

securityDefinitions:
  JWT:
    name: Authorization
    type: apiKey
    in: header

paths:
  /users:
    x-swagger-router-controller: user
    post:
      description: Create User
      operationId: create
      security:
        - JWT: []
      responses:
        200:
          description: successfully creates user.
          schema:
            type: object
        400:
          description: Bad Json Formatting
          schema:
            type: object
  /books:
    x-swagger-router-controller: book
    post:
      description: Insert Book
      operationId: create
      # security:
      #   - JWT: []
      parameters:
        - in: body
          name: body
          description: Inserts a book record
          required: true
          schema:
            $ref: '#/definitions/BookRequest'
      responses:
        201:
          description: returns a book record.
          schema:
            $ref: '#/definitions/BookResponse'
        400:
          description: Bad Json Formatting
          schema:
            type: object
    get:
      description: Get all Books
      operationId: getAll
      # security:
      #   - JWT: []
      parameters:
        - in: query
          name: q
          description: Search Param
          required: false
          type: string
        - in: query
          name: limit
          description: Limit
          required: false
          type: integer
        - in: query
          name: offset
          description: Offset
          required: false
          type: integer
      responses:
        200:
          description: return book records.
          schema:
            type: array
            items:
              $ref: '#/definitions/BookResponse'
        400:
          description: Bad Json Formatting
          schema:
            type: object

  /books/{id}:
    x-swagger-router-controller: book
    get:
      description: Get Book Record
      operationId: get
      # security:
      #   - JWT: []
      parameters:
        - in: path
          name: id
          description: Book Id
          required: true
          type: integer
      responses:
        200:
          description: returns a book record.
          schema:
            $ref: '#/definitions/BookResponse'
        400:
          description: Bad Json Formatting
          schema:
            type: object
    put:
      description: Edit Book Record
      operationId: edit
      # security:
      #   - JWT: []
      parameters:
        - in: path
          name: id
          description: Book Id
          required: true
          type: integer
        - in: body
          name: body
          description: Updates a book record
          required: true
          schema:
            $ref: '#/definitions/BookRequest'
      responses:
        200:
          description: returns book record.
          schema:
            $ref: '#/definitions/BookResponse'
        400:
          description: Bad Json Formatting
          schema:
            type: object
    delete:
      description: Delete Book Record
      operationId: deleteBook
      # security:
      #   - JWT: []
      parameters:
        - in: path
          name: id
          description: Book Id
          required: true
          type: integer
      responses:
        200:
          description: returns a book record.
        400:
          description: Bad Json Formatting
          schema:
            type: object

  /authors:
    x-swagger-router-controller: author
    post:
      description: Inserts an author
      operationId: create
      # security:
      #   - JWT: []
      parameters:
        - in: body
          name: body
          description: Inserts an author record
          required: true
          schema:
            $ref: '#/definitions/AuthorRequest'
      responses:
        200:
          description: returns a book record.
          schema:
            $ref: '#/definitions/AuthorResponse'
        400:
          description: Bad Json Formatting
          schema:
            type: object
    get:
      description: Return all authors
      operationId: getAll
      # security:
      #   - JWT: []
      responses:
        200:
          description: return all authors.
          schema:
            type: array
            items:
              $ref: '#/definitions/AuthorResponse'
        400:
          description: Bad Json Formatting
          schema:
            type: object

  /authors/{id}:
    x-swagger-router-controller: author
    get:
      description: Get Author Record
      operationId: get
      # security:
      #   - JWT: []
      parameters:
        - in: path
          name: id
          description: Author Id
          required: true
          type: integer
      responses:
        200:
          description: returns author record.
          schema:
            $ref: '#/definitions/AuthorResponse'
        400:
          description: Bad Json Formatting
          schema:
            type: object
    put:
      description: Edit Author Record
      operationId: edit
      # security:
      #   - JWT: []
      parameters:
        - in: path
          name: id
          description: Author Id
          required: true
          type: integer
        - in: body
          name: body
          description: Updates author record
          required: true
          schema:
            $ref: '#/definitions/AuthorRequest'
      responses:
        200:
          description: returns Author record.
          schema:
            $ref: '#/definitions/AuthorResponse'
        400:
          description: Bad Json Formatting
          schema:
            type: object
    delete:
      description: Delete Author Record
      operationId: deleteAuthor
      # security:
      #   - JWT: []
      parameters:
        - in: path
          name: id
          description: Author Id
          required: true
          type: integer
      responses:
        200:
          description: returns a author record.
        400:
          description: Bad Json Formatting
          schema:
            type: object

definitions:
  BookRequest:
    type: object
    required:
      - name
      - authorIds
      - description
      - publishYear
      - publisher
      - version
    properties:
      name:
        type: string
      authorIds:
        type: array
        items:
          type: number
      description:
        type: string
      publishYear:
        type: integer
      publisher:
        type: string
      version:
        type: string

  BookResponse:
    type: object
    required:
      - id
      - name
      - authors
      - description
      - publishYear
      - publisher
      - version
    properties:
      id:
        type: integer
      name:
        type: string
      authors:
        type: array
        items:
          type: string
      description:
        type: string
      publishYear:
        type: integer
      publisher:
        type: string
      version:
        type: integer

  AuthorRequest:
    type: object
    required:
      - firstName
      - lastName
      - dob
      - phone
      - email
    properties:
      firstName:
        type: string
      lastName:
        type: string
      dob:
        type: string
        format: date-time
      phone:
        type: string
      email:
        type: string

  AuthorResponse:
    type: object
    required:
      - id
      - firstName
      - lastName
      - dob
      - phone
      - email
    properties:
      id:
        type: integer
      firstName:
        type: string
      lastName:
        type: string
      dob:
        type: string
        format: date-time
      phone:
        type: string
      email:
        type: string
  